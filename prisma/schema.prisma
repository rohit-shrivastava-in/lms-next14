// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id          String  @id @default(uuid()) @map("_id")
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean @default(false)

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  attachments Attachment[]

  chapters Chapter[]

  createAt  DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  purchases purchase[]

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid()) @map("_id")
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid()) @map("_id")
  name String
  url  String

  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid()) @map("_id")
  title       String
  description String?
  videourl    String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  userProgres UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid()) @map("_id")
  assetsId   String?
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String  @id @default(uuid()) @map("_id")
  userId      String
  isCompleted Boolean @default(false)

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model purchase {
  id     String @id @default(uuid()) @map("_id")
  userId String

  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid()) @map("_id")
  userId           String
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
